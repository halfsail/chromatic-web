var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
class Sound {
  /**
   * Creates a new SyntheticSound instance.
   * @param options The options for the sound.
   */
  constructor(src, options = {}) {
    __publicField(this, "src");
    __publicField(this, "options");
    __publicField(this, "howl");
    this.src = src;
    this.options = options;
    this.create();
  }
  /**
   * Creates the Howl instance for the sound.
   */
  async create() {
    const { Howl } = await import("./howler.core-e669a980.js").then((n) => n.h);
    const { loop, volume } = this.options;
    const sound2 = new Howl({
      src: this.src,
      loop: loop || false,
      volume: volume || 1,
      ...this.options
    });
    this.howl = sound2;
  }
  /**
   * Updates the options for the sound.
   * @param options The new options for the sound.
   */
  update(options = this.options) {
    this.unload();
    this.options = options;
    this.create();
  }
  /**
   * Destroys the sound instance.
   */
  destroy() {
    this.stop();
    this.unload();
  }
  /**
   * Plays the sound.
   */
  play() {
    this.howl.play();
  }
  /**
   * Stops the sound.
   */
  stop() {
    this.howl.stop();
  }
  /**
   * Unloads the sound.
   */
  unload() {
    this.howl.unload();
  }
}
class SvelteSound extends Sound {
  /**
   * Creates a new Sound instance.
   * @param node The HTML element to attach the sound player to.
   * @param options The options to configure the sound player.
   */
  constructor(node, { src, events, ...options }) {
    super(src, options);
    __publicField(this, "node");
    __publicField(this, "events");
    this.node = node;
    this.events = events;
    this.attachControls();
  }
  /**
   * Adds event listeners to the HTML element to play and stop the sound.
   */
  attachControls() {
    const [playEvent, stopEvent] = this.events;
    this.node.play = this.play.bind(this);
    this.node.stop = this.stop.bind(this);
    this.node.addEventListener(playEvent, this.play.bind(this));
    this.node.addEventListener(stopEvent, this.stop.bind(this));
  }
  /**
   * Removes event listeners from the HTML element to play and stop the sound.
   */
  removeEventListeners() {
    const [playEvent, stopEvent] = this.events;
    this.node.removeEventListener(playEvent, this.play.bind(this));
    this.node.removeEventListener(stopEvent, this.stop.bind(this));
  }
  /**
   * Updates the sound player with new options.
   * @param options The new options to configure the sound player.
   */
  update(options) {
    this.removeEventListeners();
    super.update(options);
    this.attachControls();
  }
  /**
   * Destroys the sound player and removes all event listeners.
   */
  destroy() {
    this.removeEventListeners();
    super.destroy();
  }
}
function sound(node, options) {
  return new SvelteSound(node, options);
}
function useSound(src, events, options) {
  return (node, overrideOptions) => new SvelteSound(node, { src, events, ...options, ...overrideOptions });
}
export {
  Sound,
  sound,
  useSound
};
